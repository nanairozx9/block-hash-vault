"""
CryptoPulse: –ê–Ω–∞–ª–∏–∑ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Bitcoin-–∞–¥—Ä–µ—Å–∞.
"""

import requests
from datetime import datetime
import argparse
import statistics

def fetch_address_transactions(address):
    url = f"https://api.blockchair.com/bitcoin/dashboards/address/{address}"
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    return response.json()["data"][address]["transactions"]

def fetch_tx_time(txid):
    url = f"https://api.blockchair.com/bitcoin/raw/transaction/{txid}"
    r = requests.get(url)
    if r.status_code != 200:
        return None
    try:
        time_stamp = r.json()["data"][txid]["decoded_raw_transaction"]["time"]
        return datetime.utcfromtimestamp(time_stamp)
    except:
        return None

def analyze_pulse(address):
    print(f"üîé –ê–Ω–∞–ª–∏–∑ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –∞–¥—Ä–µ—Å–µ: {address}")
    tx_ids = fetch_address_transactions(address)
    timestamps = []

    for txid in tx_ids[:30]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        t = fetch_tx_time(txid)
        if t:
            timestamps.append(t)

    if len(timestamps) < 5:
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return

    timestamps.sort()
    intervals = [(timestamps[i] - timestamps[i-1]).total_seconds() / 3600 for i in range(1, len(timestamps))]

    avg_interval = round(statistics.mean(intervals), 2)
    stdev_interval = round(statistics.stdev(intervals), 2) if len(intervals) > 1 else 0

    print(f"‚è± –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: {avg_interval} —á")
    print(f"üìà C—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stdev_interval} —á")

    if stdev_interval < avg_interval * 0.5:
        print("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞.")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Å–ø–ª–µ—Å–∫ –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CryptoPulse ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Bitcoin-–∫–æ—à–µ–ª—å–∫–∞.")
    parser.add_argument("address", help="Bitcoin-–∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    args = parser.parse_args()
    analyze_pulse(args.address)
